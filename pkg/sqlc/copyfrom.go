// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: copyfrom.go

package sqlc

import (
	"context"
)

// iteratorForCreateRequestHeaders implements pgx.CopyFromSource.
type iteratorForCreateRequestHeaders struct {
	rows                 []CreateRequestHeadersParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateRequestHeaders) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateRequestHeaders) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].RequestID,
		r.rows[0].Name,
		r.rows[0].Value,
	}, nil
}

func (r iteratorForCreateRequestHeaders) Err() error {
	return nil
}

func (q *Queries) CreateRequestHeaders(ctx context.Context, arg []CreateRequestHeadersParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"request_headers"}, []string{"request_id", "name", "value"}, &iteratorForCreateRequestHeaders{rows: arg})
}

// iteratorForCreateRequestQueryParameters implements pgx.CopyFromSource.
type iteratorForCreateRequestQueryParameters struct {
	rows                 []CreateRequestQueryParametersParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateRequestQueryParameters) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateRequestQueryParameters) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].RequestID,
		r.rows[0].Name,
		r.rows[0].Value,
	}, nil
}

func (r iteratorForCreateRequestQueryParameters) Err() error {
	return nil
}

func (q *Queries) CreateRequestQueryParameters(ctx context.Context, arg []CreateRequestQueryParametersParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"request_query_parameters"}, []string{"request_id", "name", "value"}, &iteratorForCreateRequestQueryParameters{rows: arg})
}

// iteratorForCreateResponseHeaders implements pgx.CopyFromSource.
type iteratorForCreateResponseHeaders struct {
	rows                 []CreateResponseHeadersParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateResponseHeaders) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateResponseHeaders) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].Requestid,
		r.rows[0].Name,
		r.rows[0].Value,
	}, nil
}

func (r iteratorForCreateResponseHeaders) Err() error {
	return nil
}

func (q *Queries) CreateResponseHeaders(ctx context.Context, arg []CreateResponseHeadersParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"response_headers"}, []string{"requestid", "name", "value"}, &iteratorForCreateResponseHeaders{rows: arg})
}
